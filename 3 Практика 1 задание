public class Circle extends Shape {
    protected double radius;

    Circle(){};

    public Circle(double radius) {
        this.radius = radius;
    }

    public Circle(double radius, String color, boolean filled) {
        super(color, filled);
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        this.radius = radius;
    }

    @Override
    double getArea() {
        return  Math.PI*radius*radius;
    }

    @Override
    double getPerimeter() {
        return  2*Math.PI*radius;
    }

    @Override
    public String toString() {
        return "Shape: circle, radius: " +this.radius + ", color: " +this.color+ ", filled: " +this.filled;
    }
}



public class Rectangle extends Shape{
    protected double width;

    protected double length;

    Rectangle(){};

    public Rectangle(double width, double length) {
        this.width = width;
        this.length = length;
    }

    public Rectangle(double width, double length, String color, boolean filled) {
        super(color, filled);
        this.width = width;
        this.length = length;
    }

    public double getWidth() {
        return width;
    }

    public void setWidth(double width) {
        this.width = width;
    }

    public double getLength() {
        return length;
    }

    public void setLength(double length) {
        this.length = length;
    }

    @Override
    double getArea() {
        return super.getArea();
    }

    @Override
    double getPerimeter() {
        return super.getPerimeter();
    }

    @Override
    public String toString() {
        return "Shape: rectangle, color: " +this.color + ", filled: "
                +this.filled+ ", width: " +this.width;
    }
}



public abstract class Shape {
    protected String color;
    protected boolean filled;

    Shape(){};

    public Shape(String color, boolean filled) {
        this.color = color;
        this.filled = filled;
    }

    public String getColor() {
        return color;
    }

    public void setColor(String color) {
        this.color = color;
    }

    public boolean isFilled(){
        return filled;
    };

    public void setFilled(boolean filled) {
        this.filled = filled;
    }

    double getArea(){
        return 0;
    };
    double getPerimeter(){
        return 0;
    };

    @Override
    public String toString() {
        return super.toString();
    }
}



import org.w3c.dom.css.Rect;
public class ShapeTest {
    public static void main(String[] args) {
        int i = 4;
        Shape s1 = new Circle(5.5,"RED",false);

        System.out.println(s1);
        System.out.println(s1.getArea());
        System.out.println(s1.getPerimeter());
        System.out.println(s1.getColor());
        System.out.println(s1.isFilled());
        //System.out.println(s1.getRadius()); //выдаст ошибку потому что в абстрактном классе Shape нет метода getRadius

        System.out.println();
        Circle c1 = (Circle)s1;
        System.out.println(c1);
        System.out.println(c1.getArea());
        System.out.println(c1.getPerimeter());
        System.out.println(c1.getColor());
        System.out.println(s1.isFilled());
        System.out.println(c1.getRadius());

        System.out.println();
//        Shape s2 = new Shape(); //выдаст ошибку, потому что в абстр классе
        Shape s3 = new Rectangle(1.0,2.0,"RED",false);
        System.out.println(s3);
        System.out.println(s3.getArea());
        System.out.println(s3.getPerimeter());
        System.out.println(s3.getColor());
        //System.out.println(s3.getLength()); //в классе Shape нет метода getLength

        System.out.println();
        Rectangle r1 = (Rectangle)s3;
        System.out.println(r1);
        System.out.println(r1.getArea());
        System.out.println(r1.getColor());
        System.out.println(r1.getLength());

        System.out.println();
        Shape s4= new Square(6.6);
        System.out.println(s4);
        System.out.println(s4.getArea());
        System.out.println(s4.getColor());
//        System.out.println(s4.getSide()); //в классе Shape нет этого метода

        System.out.println();
        Rectangle r2 = (Rectangle)s4;
        System.out.println(r2);
        System.out.println(r2.getArea());
        System.out.println(r2.getColor());
//        System.out.println(r2.getSide()); //в классе Rectangle нет этого метода
        System.out.println(r2.getLength());

        System.out.println();
        Square sq1 = (Square)r2;
        System.out.println(sq1);
        System.out.println(sq1.getArea());
        System.out.println(sq1.getColor());
        System.out.println(sq1.getSide());
        System.out.println(sq1.getLength());
    }
}
